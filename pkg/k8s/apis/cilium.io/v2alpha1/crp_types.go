// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

package v2alpha1

import (
	"github.com/cilium/cilium/pkg/identity"
	slimv1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
	"github.com/cilium/cilium/pkg/policy/api"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +genclient
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories={cilium,ciliumresolved},singular="ciliumresolvedpolicy",path="ciliumresolvedpolicies",scope="Cluster",shortName={crp}
// +kubebuilder:printcolumn:JSONPath=".metadata.creationTimestamp",name="Age",type=date
// +kubebuilder:storageversion

// CiliumResolvedPolicy is a Kubernetes third-party resource representing pre-computed policy
// with identity mappings for reduced computational overhead on Cilium agents.
// It is generated by a centralized controller that watches CNP, CCNP, and KNP resources,
// computes the policy rules and their affected identities, and distributes them to agents.
// This centralized approach significantly reduces resource overhead and API server load
// in large clusters by eliminating redundant policy computation across all agents.
//
// The CiliumResolvedPolicy is cluster-scoped and contains the pre-computed mapping between
// network policy rules and affected identities, allowing agents to efficiently apply
// the policies without having to perform the expensive identity resolution themselves.
type CiliumResolvedPolicy struct {
	// +k8s:openapi-gen=false
	// +deepequal-gen=false
	metav1.TypeMeta `json:",inline"`
	// +k8s:openapi-gen=false
	// +deepequal-gen=false
	metav1.ObjectMeta `json:"metadata"`

	// Spec is the specification of the CiliumResolvedPolicy
	//
	// +kubebuilder:validation:Required
	Spec *CiliumResolvedPolicySpec `json:"spec,omitempty"`

	// Status is the status of the CiliumResolvedPolicy
	Status CiliumResolvedPolicyStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// CiliumResolvedPolicyList is a list of CiliumResolvedPolicy objects
type CiliumResolvedPolicyList struct {
	// +k8s:openapi-gen=false
	// +deepequal-gen=false
	metav1.TypeMeta `json:",inline"`
	// +k8s:openapi-gen=false
	// +deepequal-gen=false
	metav1.ListMeta `json:"metadata"`

	// Items is a list of CiliumResolvedPolicies
	Items []CiliumResolvedPolicy `json:"items"`
}

// CiliumResolvedPolicySpec is the specification of the CiliumResolvedPolicy
type CiliumResolvedPolicySpec struct {
	// PolicyRef is a reference to source policy which was resolved
	// +kubebuilder:validation:Required
	PolicyRef PolicyRef `json:"policyRef"`

	// Identities is the list of identities that match the selector.
	// This list can be empty if the selector does not match any identities.
	// +kubebuilder:validation:Optional
	SubjectIdentities []identity.NumericIdentity `json:"subjectIdentities"`

	// Ingress rule identities is the list of ingress rules that were selected from the source policy.
	// It can be empty if no ingress rules were selected.
	// +kubebuilder:validation:Required
	IngressRuleIdentities []CRPPeerRule `json:"ingressRuleIdentities"`

	// IngressDenyRuleIdentities is the list of ingress deny rules that were selected from the source policy.
	IngressDenyRuleIdentities []CRPPeerRule `json:"ingressDenyRuleIdentities,omitempty"`

	// Egress rule identites is the list of egress rules that were selected from the source policy.
	// It can be empty if no egress rules were selected.
	// +kubebuilder:validation:Required
	EgressRuleIdentities []CRPPeerRule `json:"egressRuleIdentities"`

	// EgressDenyRuleIdentities is the list of egress deny rules that were selected from the source policy.
	EgressDenyRuleIdentities []CRPPeerRule `json:"egressDenyRuleIdentities,omitempty"`
}

// PolicyRef is a reference to the source policy which was resolved
type PolicyRef struct {
	// Name is the name of the policy
	// +kubebuilder:validation:Required
	Name string `json:"name"`

	// Namespace is the namespace of the policy
	// For CCNP this will be empty as it's cluster-scoped
	// +kubebuilder:validation:Required
	Namespace string `json:"namespace"`

	// Type is the type of the policy
	// CNP: CiliumNetworkPolicy
	// CCNP: CiliumClusterwideNetworkPolicy
	// KNP: Kubernetes NetworkPolicy
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Enum=CNP;CCNP;KNP
	Type string `json:"type"`

	// UID is the UID of the source policy
	// +kubebuilder:validation:Optional
	UID string `json:"uid,omitempty"`
}

// CRPPeerRule defines a component of an ingress or egress rule within a parsedCRP.
// It associates a set of peer NumericIdentities with a specific L3/L4/L7 configuration.
type CRPPeerRule struct {
	// MatchingPeerIdentities is a set of peer NumericIdentities that are allowed
	// (for ingress) or targeted (for egress) by this part of the rule,
	// sharing the same L3/L4/L7 configuration.
	MatchingPeerIdentities []identity.NumericIdentity `json:"matchingPeerIdentities"`

	// ToPorts is a list of destination ports identified by port number and
	// protocol which the endpoint subject to the rule is allowed to
	// receive connections on.
	//
	// +kubebuilder:validation:Optional
	ToPorts api.PortRules `json:"toPorts,omitempty"`

	// ICMPs is a list of ICMP rule identified by type number
	// which the endpoint subject to the rule is allowed to
	// receive connections on.
	//
	// Example:
	// Any endpoint with the label "app=httpd" can only accept incoming
	// type 8 ICMP connections.
	//
	// +kubebuilder:validation:Optional
	ICMPs api.ICMPRules `json:"icmps,omitempty"`
}

// CiliumResolvedPolicyStatus is the status of a CiliumResolvedPolicy
type CiliumResolvedPolicyStatus struct {
	// Processed indicates whether the policy has been processed by the central controller
	Processed bool `json:"processed,omitempty"`

	// ProcessingTime is the timestamp when the policy was processed
	ProcessingTime *slimv1.Time `json:"processingTime,omitempty"`
}
